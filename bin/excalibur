#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2018 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#     Santiago Due√±as <sduenas@bitergia.com>
#

import json
import sys

import pkg_resources
from elasticsearch import Elasticsearch
from perceval.backends.core.git import Git

from excalibur.data.furnace.element import Commit, CommitAction
from excalibur.kilgh import Kilgh
from excalibur.tom import Tom
from excalibur.writers.git_writers import GitCommitElasticWriter, GitFileElasticWriter


def read_items():
    buffer = None

    for line in sys.stdin.readlines():
        if line.startswith('{\n'):
            buffer = line
        elif line.startswith('}\n'):
            buffer += line
            obj = json.loads(buffer)
            yield obj
        else:
            buffer += line


def read_file(filename, mode='r'):
    with open(filename, mode) as f:
        content = f.read()
    content = json.loads(content)
    return content


def main():
    raw_items = read_file(sys.argv[1])

    print("\nITEMIZE RAW ITEMS\n")

    tom = Tom()
    items = []
    for item in tom.process(raw_items):
        print(item)
        items.append(item)

    print("\nREFINE ITEMS\n")

    kilgh = Kilgh()
    for refined in kilgh.refine(items):
        print(refined)

    write_manager_mock(kilgh.mock_db)

    print("\n-------\nSUMMARY\n-------\n")
    print("Items:\t\t", len(items))
    print("Refined:\t", len(kilgh.mock_db))
    print("Ignored:\t", kilgh.ignored)


def write_manager_mock(mock_db):

    # TODO connections should depend on writing config
    # Creating connections
    commit_out_index = 'git_excalibur'
    file_out_index = 'git_excalibur_aoc'
    es_conn = Elasticsearch(["http://localhost:9200"], timeout=100)

    init_es_index(commit_out_index, es_conn)
    init_es_index(file_out_index, es_conn)

    eswriter_commit = GitCommitElasticWriter(es_conn, commit_out_index)
    eswriter_file = GitFileElasticWriter(es_conn, file_out_index)

    for refined_item in mock_db.values():
        # TODO writers should be activated depending on config
        if refined_item.metadata.type == Commit.__name__ and \
                refined_item.metadata.subtype == Git.__qualname__:
            eswriter_commit.write_item(refined_item)

        elif refined_item.metadata.type == CommitAction.__name__ and \
                refined_item.metadata.subtype == Git.__qualname__:
            refined_commit = mock_db.get(refined_item.metadata.parent_uuid)
            eswriter_file.write(refined_item, refined_commit)

        else:
            print("Don't know how to write that", refined_item.metadata.subtype,
                  refined_item.metadata.type)


def init_es_index(index_name, es_conn):
    exists_index = es_conn.indices.exists(index=index_name)
    # TODO support incremental mode instead of deleting index by default
    if exists_index:
        # Initialize out index
        es_conn.indices.delete(index_name, ignore=[400, 404])
    # TODO put mapping
    # filename = pkg_resources.resource_filename('excalibur', 'elastic/mappings/git.json')
    # Read Mapping
    # with open(mappings_file) as f:
    #     mapping = f.read()
    es_conn.indices.create(index_name)  # , body=mapping)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        s = "\n\nReceived Ctrl-C or other break signal. Exiting.\n"
        sys.stderr.write(s)
        sys.exit(0)
